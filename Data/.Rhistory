str(size_madre_cleen)
head(size_madre_cleen)
write.table(size_madre_cleen, file='size_madre_cleened.txt', col.names = TRUE)
size_madre <- read.table("size_madre_cleened.txt", header = T, dec=",")
names(size_madre)[1]<-paste("mother")#renombramos igual a la columna para que se entiendan.
head(size_madre)
head(ger3)
ger4= merge(ger3,size_madre, by="mother", all.x = T)
head(ger4)
head(ger3)
str(ger3)
rm(list=ls())
path<-"D:/Proyecto_AdAptA/Gene Flow Silene (Mallorca)/Silene-ciliata-gene-flow-master/Data"
#Archivo original en https://github.com/javimorente/Silene-ciliata-gene-flow/tree/master/Data
setwd(path)
field=read.table("geneflow_field_experiment.txt", header=T, sep="\t")
str(field)
field<-field[,1:8]
key=read.table("geneflow_field_experiment_KEY.txt", header=T, sep="\t")
str(key)
str(field)
#fila with NA´s, I found it looking at the levels of each factor ("")
field <- field[-4758, ]
field<-droplevels(field)
code=paste(key$blo,key$nail, sep = "_")
key<-cbind(key,code)
duplicated(key$code)
key[duplicated(key$code), ]
naj=subset(key, pop=="naj")
#F1
naj.F <- naj[grep("naj", naj$father), ]
vec=rep("F1", nrow(naj.F))
naj.F1=data.frame(naj.F,treat=vec)
#F2
naj.F <- naj[grep("mor", naj$father), ]
vec=rep("F2", nrow(naj.F))
naj.F2=data.frame(naj.F,treat=vec)
#F3
naj.F <- naj[grep("pen", naj$father), ]
vec=rep("F3", nrow(naj.F))
naj.F3=data.frame(naj.F,treat=vec)
#F4
naj.F <- rbind (
(naj[grep("rui", naj$father), ]) , (naj[grep("agi", naj$father), ])
)
vec=rep("F4", nrow(naj.F))
naj.F4=data.frame(naj.F,treat=vec)
#F5
naj.F <- naj[grep("neg", naj$father), ]
vec=rep("F5", nrow(naj.F))
naj.F5=data.frame(naj.F,treat=vec)
naj2=rbind(naj.F1,naj.F2,naj.F3,naj.F4,naj.F5)
###Morrena
mor=subset(key, pop=="mor")
#F1
mor.F <- mor[grep("mor", mor$father), ]
vec=rep("F1", nrow(mor.F))
mor.F1=data.frame(mor.F,treat=vec)
#F2
mor.F <- mor[grep("naj", mor$father), ]
vec=rep("F2", nrow(mor.F))
mor.F2=data.frame(mor.F,treat=vec)
#F3
mor.F <- mor[grep("pen", mor$father), ]
vec=rep("F3", nrow(mor.F))
mor.F3=data.frame(mor.F,treat=vec)
#F4
mor.F <- rbind (
(mor[grep("rui", mor$father), ]) , (mor[grep("agi", mor$father), ])
)
vec=rep("F4", nrow(mor.F))
mor.F4=data.frame(mor.F,treat=vec)
#F5
mor.F <-    rbind (
(mor[grep("neg", mor$father), ]) , (mor[grep("zon", mor$father), ])
)
vec=rep("F5", nrow(mor.F))
mor.F5=data.frame(mor.F,treat=vec)
mor2=rbind(mor.F1,mor.F2,mor.F3,mor.F4,mor.F5)
###ruinas
rui=subset(key, pop=="rui")
#F1
rui.F <- rui[grep("rui", rui$father), ]
vec=rep("F1", nrow(rui.F))
rui.F1=data.frame(rui.F,treat=vec)
#F2
rui.F <- rui[grep("agi", rui$father), ]
vec=rep("F2", nrow(rui.F))
rui.F2=data.frame(rui.F,treat=vec)
#F3
rui.F <- rui[grep("neg", rui$father), ]
vec=rep("F3", nrow(rui.F))
rui.F3=data.frame(rui.F,treat=vec)
#F4
rui.F <- rbind (
(rui[grep("naj", rui$father), ]) , (rui[grep("mor", rui$father), ])
)
vec=rep("F4", nrow(rui.F))
rui.F4=data.frame(rui.F,treat=vec)
#F5
rui.F <- rui[grep("pen", rui$father), ]
vec=rep("F5", nrow(rui.F))
rui.F5=data.frame(rui.F,treat=vec)
rui2=rbind(rui.F1,rui.F2,rui.F3,rui.F4,rui.F5)
###Aguilas
agi=subset(key, pop=="agi")
#F1
agi.F <- agi[grep("agi", agi$father), ]
vec=rep("F1", nrow(agi.F))
agi.F1=data.frame(agi.F,treat=vec)
#F2
agi.F <- agi[grep("rui", agi$father), ]
vec=rep("F2", nrow(agi.F))
agi.F2=data.frame(agi.F,treat=vec)
#F3
agi.F <- agi[grep("neg", agi$father), ]
vec=rep("F3", nrow(agi.F))
agi.F3=data.frame(agi.F,treat=vec)
#F4
agi.F <- rbind (
(agi[grep("naj", agi$father), ]) , (agi[grep("mor", agi$father), ])
)
vec=rep("F4", nrow(agi.F))
agi.F4=data.frame(agi.F,treat=vec)
#F5
agi.F <- rbind (
(agi[grep("pen", agi$father), ]), (agi[grep("zon", agi$father), ])
)
vec=rep("F5", nrow(agi.F))
agi.F5=data.frame(agi.F,treat=vec)
agi2=rbind(agi.F1,agi.F2,agi.F3,agi.F4,agi.F5)
###sestil
ses=subset(key, pop=="ses")
#F1
ses.F <- ses[grep("ses", ses$father), ]
vec=rep("F1", nrow(ses.F))
ses.F1=data.frame(ses.F,treat=vec)
#F2
ses.F <- ses[grep("cam", ses$father), ]
vec=rep("F2", nrow(ses.F))
ses.F2=data.frame(ses.F,treat=vec)
#F3
ses.F <- ses[grep("zon", ses$father), ]
vec=rep("F3", nrow(ses.F))
ses.F3=data.frame(ses.F,treat=vec)
#F4
ses.F <- rbind (
(ses[grep("naj", ses$father), ]) , (ses[grep("mor", ses$father), ])
)
vec=rep("F4", nrow(ses.F))
ses.F4=data.frame(ses.F,treat=vec)
#F5
ses.F <- ses[grep("pen", ses$father), ]
vec=rep("F5", nrow(ses.F))
ses.F5=data.frame(ses.F,treat=vec)
ses2=rbind(ses.F1,ses.F2,ses.F3,ses.F4,ses.F5)
###Campanarios
cam=subset(key, pop=="cam")
#F1
cam.F <- cam[grep("cam", cam$father), ]
vec=rep("F1", nrow(cam.F))
cam.F1=data.frame(cam.F,treat=vec)
#F2
cam.F <- cam[grep("ses", cam$father), ]
vec=rep("F2", nrow(cam.F))
cam.F2=data.frame(cam.F,treat=vec)
#F3
cam.F <- cam[grep("zon", cam$father), ]
vec=rep("F3", nrow(cam.F))
cam.F3=data.frame(cam.F,treat=vec)
#F4
cam.F <- rbind (
(cam[grep("naj", cam$father), ]) , (cam[grep("mor", cam$father), ])
)
vec=rep("F4", nrow(cam.F))
cam.F4=data.frame(cam.F,treat=vec)
#F5
cam.F <- cam[grep("pen", cam$father), ]
vec=rep("F5", nrow(cam.F))
cam.F5=data.frame(cam.F,treat=vec)
cam2=rbind(cam.F1,cam.F2,cam.F3,cam.F4,cam.F5)
key=rbind(naj2,mor2,rui2,agi2, ses2, cam2)
moun= data.frame(
ifelse(key$pop=="naj" | key$pop=="mor", "gua",
ifelse(key$pop=="ses" | key$pop=="cam", "gre", "bej")))
colnames(moun)="moun"
key=data.frame(key, moun)
str(key)
code=paste(field$blo,field$nail, sep = "_")
field=data.frame(field, code)
#write.table (field1, file = "field1.txt")
#field2=merge(field, key, by="code")
field2=merge(field, data.frame(code=key$code, mother=key$mother, father=key$father, seeds=key$seeds, treat= key$treat), by= "code", )
field2<-droplevels(field2)
str(field2)
code2=paste(field2$code,field2$pos,sep="_") #bloque_clavo_posicion
code3=paste(field2$code,field2$pos,field2$time,sep="_") #Bloque_clavo_posicion_tiempo
field3=data.frame(code2,code3,field2)
field3<-field3[!duplicated(field3$code3),]
t1=subset(field3, time==1)
t2=subset(field3, time==2)
t3=subset(field3, time==3)
t4=subset(field3, time==4)
t1.conditional=t1[,1] %in% t2[,1] #TRUE == germinado/vivo; FALSE == germinado/muerto
t1=data.frame(t1, conditional=t1.conditional)
t2.conditional= t2[,1] %in% t1[,1] #TRUE == 0/0 germinado/vivo; FALSE ==no germiniado/germinado
t2=data.frame(t2, conditional=t2.conditional)
t3.1.conditional=t3[,1] %in% t1[,1]
t3.2.conditional=t3[,1] %in% t2[,1]
t3.conditional<-ifelse(t3.1.conditional=="FALSE" & t3.2.conditional=="FALSE", "FALSE","TRUE") #FALSE = Germination in T3 (no ger/no ger/germinado), TRUE== germinado en T1 o T2 y vivo T3 )
t3=data.frame(t3, conditional=t3.conditional)
t4.1.conditional=t4[,1] %in% t1[,1]
t4.2.conditional=t4[,1] %in% t2[,1]
t4.3.conditional=t4[,1] %in% t3[,1]
t4.conditional<-ifelse(t4.1.conditional=="FALSE" & t4.2.conditional=="FALSE" & t4.3.conditional=="FALSE","FALSE","TRUE") #FALSE = Germination in T4 (no ger/no ger/no ger/germinado), TRUE==Superv T4 (germinado en T1 o T2 o T3 y vivo T4)
t4=data.frame(t4, conditional=t4.conditional)
ger<-rbind(t1,subset(t2, conditional=="FALSE"),subset(t3, conditional=="FALSE"),subset(t4, conditional=="FALSE") )
#####Dataframe con todas las semillas germinadas y el censo (Time) en el que lo hicieron.
ger.sum=aggregate(class~code, data=ger, FUN=sum) #suma germinadas por clavo
colnames(ger.sum)=c("code","n.ger")
ger2= merge(key,ger.sum, by="code", sort = TRUE)
nrow(ger2) #988 clavos con germinación
length(which(!duplicated(ger$code)=="TRUE"))  #Compruebe que coincide con base de datos ger (code no duplicados es 988)
no.ger<-ger2$seeds-ger2$n.ger #calculo semillas no germinadas
p.ger=ger2$n.ger/ger2$seeds #calculo proporcion gernminadas
ger2=data.frame(ger2,no.ger,p.ger)
ger2<-droplevels(ger2)
nrow(ger2)
ger2=subset(ger2, c(blo!="B3" | blo!="B8"))    #Eliminar bloque 3 y bloque 8
ger3<-subset(ger2, subset= c(treat=="F1" | treat== "F2" | treat=="F3"))   #Seleccionar tratamientos F1, F2, F3
ger3<-subset(ger2, subset= c(treat!="F4" & treat!= "F5" )) # Extraer tratamientos F4 y F5
ger3<-droplevels(ger3)
str(ger3)
rm(list=ls())
path<-"D:/Proyecto_AdAptA/Gene Flow Silene (Mallorca)/Silene-ciliata-gene-flow-master/Data"
#Archivo original en https://github.com/javimorente/Silene-ciliata-gene-flow/tree/master/Data
setwd(path)
field=read.table("geneflow_field_experiment.txt", header=T, sep="\t")
str(field)
field<-field[,1:8]
key=read.table("geneflow_field_experiment_KEY.txt", header=T, sep="\t")
str(key)
str(field)
#fila with NA´s, I found it looking at the levels of each factor ("")
field <- field[-4758, ]
field<-droplevels(field)
#################################################
######## 1.2 Variable code (block & nail) ########
code=paste(key$blo,key$nail, sep = "_")
key<-cbind(key,code)
duplicated(key$code)
key[duplicated(key$code), ]
duplicates_KEY <- as.data.frame(key[duplicated(key$code), ])
#write.table(duplicates_KEY, file="duplicates_KEY.txt")
#key<-key[!(duplicated(key$code)| duplicated(key$code, fromLast=TRUE)) ,] #26 casos duplicados error toma datos clavo. Cuando se resuelva borrar esta línea de codigo
##########################################
######### 1.3 Variable treatment ########
###Najarra
naj=subset(key, pop=="naj")
#F1
naj.F <- naj[grep("naj", naj$father), ]
vec=rep("F1", nrow(naj.F))
naj.F1=data.frame(naj.F,treat=vec)
#F2
naj.F <- naj[grep("mor", naj$father), ]
vec=rep("F2", nrow(naj.F))
naj.F2=data.frame(naj.F,treat=vec)
#F3
naj.F <- naj[grep("pen", naj$father), ]
vec=rep("F3", nrow(naj.F))
naj.F3=data.frame(naj.F,treat=vec)
#F4
naj.F <- rbind (
(naj[grep("rui", naj$father), ]) , (naj[grep("agi", naj$father), ])
)
vec=rep("F4", nrow(naj.F))
naj.F4=data.frame(naj.F,treat=vec)
#F5
naj.F <- naj[grep("neg", naj$father), ]
vec=rep("F5", nrow(naj.F))
naj.F5=data.frame(naj.F,treat=vec)
naj2=rbind(naj.F1,naj.F2,naj.F3,naj.F4,naj.F5)
###Morrena
mor=subset(key, pop=="mor")
#F1
mor.F <- mor[grep("mor", mor$father), ]
vec=rep("F1", nrow(mor.F))
mor.F1=data.frame(mor.F,treat=vec)
#F2
mor.F <- mor[grep("naj", mor$father), ]
vec=rep("F2", nrow(mor.F))
mor.F2=data.frame(mor.F,treat=vec)
#F3
mor.F <- mor[grep("pen", mor$father), ]
vec=rep("F3", nrow(mor.F))
mor.F3=data.frame(mor.F,treat=vec)
#F4
mor.F <- rbind (
(mor[grep("rui", mor$father), ]) , (mor[grep("agi", mor$father), ])
)
vec=rep("F4", nrow(mor.F))
mor.F4=data.frame(mor.F,treat=vec)
#F5
mor.F <-    rbind (
(mor[grep("neg", mor$father), ]) , (mor[grep("zon", mor$father), ])
)
vec=rep("F5", nrow(mor.F))
mor.F5=data.frame(mor.F,treat=vec)
mor2=rbind(mor.F1,mor.F2,mor.F3,mor.F4,mor.F5)
###ruinas
rui=subset(key, pop=="rui")
#F1
rui.F <- rui[grep("rui", rui$father), ]
vec=rep("F1", nrow(rui.F))
rui.F1=data.frame(rui.F,treat=vec)
#F2
rui.F <- rui[grep("agi", rui$father), ]
vec=rep("F2", nrow(rui.F))
rui.F2=data.frame(rui.F,treat=vec)
#F3
rui.F <- rui[grep("neg", rui$father), ]
vec=rep("F3", nrow(rui.F))
rui.F3=data.frame(rui.F,treat=vec)
#F4
rui.F <- rbind (
(rui[grep("naj", rui$father), ]) , (rui[grep("mor", rui$father), ])
)
vec=rep("F4", nrow(rui.F))
rui.F4=data.frame(rui.F,treat=vec)
#F5
rui.F <- rui[grep("pen", rui$father), ]
vec=rep("F5", nrow(rui.F))
rui.F5=data.frame(rui.F,treat=vec)
rui2=rbind(rui.F1,rui.F2,rui.F3,rui.F4,rui.F5)
###Aguilas
agi=subset(key, pop=="agi")
#F1
agi.F <- agi[grep("agi", agi$father), ]
vec=rep("F1", nrow(agi.F))
agi.F1=data.frame(agi.F,treat=vec)
#F2
agi.F <- agi[grep("rui", agi$father), ]
vec=rep("F2", nrow(agi.F))
agi.F2=data.frame(agi.F,treat=vec)
#F3
agi.F <- agi[grep("neg", agi$father), ]
vec=rep("F3", nrow(agi.F))
agi.F3=data.frame(agi.F,treat=vec)
#F4
agi.F <- rbind (
(agi[grep("naj", agi$father), ]) , (agi[grep("mor", agi$father), ])
)
vec=rep("F4", nrow(agi.F))
agi.F4=data.frame(agi.F,treat=vec)
#F5
agi.F <- rbind (
(agi[grep("pen", agi$father), ]), (agi[grep("zon", agi$father), ])
)
vec=rep("F5", nrow(agi.F))
agi.F5=data.frame(agi.F,treat=vec)
agi2=rbind(agi.F1,agi.F2,agi.F3,agi.F4,agi.F5)
###sestil
ses=subset(key, pop=="ses")
#F1
ses.F <- ses[grep("ses", ses$father), ]
vec=rep("F1", nrow(ses.F))
ses.F1=data.frame(ses.F,treat=vec)
#F2
ses.F <- ses[grep("cam", ses$father), ]
vec=rep("F2", nrow(ses.F))
ses.F2=data.frame(ses.F,treat=vec)
#F3
ses.F <- ses[grep("zon", ses$father), ]
vec=rep("F3", nrow(ses.F))
ses.F3=data.frame(ses.F,treat=vec)
#F4
ses.F <- rbind (
(ses[grep("naj", ses$father), ]) , (ses[grep("mor", ses$father), ])
)
vec=rep("F4", nrow(ses.F))
ses.F4=data.frame(ses.F,treat=vec)
#F5
ses.F <- ses[grep("pen", ses$father), ]
vec=rep("F5", nrow(ses.F))
ses.F5=data.frame(ses.F,treat=vec)
ses2=rbind(ses.F1,ses.F2,ses.F3,ses.F4,ses.F5)
###Campanarios
cam=subset(key, pop=="cam")
#F1
cam.F <- cam[grep("cam", cam$father), ]
vec=rep("F1", nrow(cam.F))
cam.F1=data.frame(cam.F,treat=vec)
#F2
cam.F <- cam[grep("ses", cam$father), ]
vec=rep("F2", nrow(cam.F))
cam.F2=data.frame(cam.F,treat=vec)
#F3
cam.F <- cam[grep("zon", cam$father), ]
vec=rep("F3", nrow(cam.F))
cam.F3=data.frame(cam.F,treat=vec)
#F4
cam.F <- rbind (
(cam[grep("naj", cam$father), ]) , (cam[grep("mor", cam$father), ])
)
vec=rep("F4", nrow(cam.F))
cam.F4=data.frame(cam.F,treat=vec)
#F5
cam.F <- cam[grep("pen", cam$father), ]
vec=rep("F5", nrow(cam.F))
cam.F5=data.frame(cam.F,treat=vec)
cam2=rbind(cam.F1,cam.F2,cam.F3,cam.F4,cam.F5)
key=rbind(naj2,mor2,rui2,agi2, ses2, cam2)
moun= data.frame(
ifelse(key$pop=="naj" | key$pop=="mor", "gua",
ifelse(key$pop=="ses" | key$pop=="cam", "gre", "bej")))
colnames(moun)="moun"
key=data.frame(key, moun)
#############################################################
#################   2. Germination   ########################
#############################################################
#####################################
########  2.1 Preparing data  #######
code=paste(field$blo,field$nail, sep = "_")
field=data.frame(field, code)
#write.table (field1, file = "field1.txt")
#field2=merge(field, key, by="code")
field2=merge(field, data.frame(code=key$code, mother=key$mother, father=key$father, seeds=key$seeds, treat= key$treat), by= "code", )
field2<-droplevels(field2)
#########################################SE PIERDEN 5 CASOSO!!!!
#field.conditional=field$code %in% field2$code
#field1<-data.frame(field, conditional=field.conditional)
#field1False<-subset(field1, conditional <= FALSE)
#field1False
#key<-as.data.frame(key)
#key1False<-subset(key, code == "B16_5")
#no está en key.
#Los he encontrado en los estadillos. No se debieron de pasar esos códigos.
#modifico el original y lo subo también al GitHub
##########################################
#key2=subset(ger,select=c(code,moun,pop,mother,father,seeds,treat) )
#key2=key2[!duplicated(key2), ]
###Nails whitout seedlings (no germination)
#seedlings=data.frame(field[,1])
#seedlings=seedlings[!duplicated(seedlings), ]
#nail=data.frame(code=key[,1])
#nail.zero=apply(nail, 1, function (x) x %in% seedlings)
#length(which(nail.zero==FALSE)) #FALSE== nails without seedlings
#nail.zero=data.frame( code=nail, condition=nail.zero)
#nail.zero=subset(nail.zero, condition=="FALSE",code)
#zero=rep(0,nrow(nail.zero))
#nail.zero=data.frame(code=nail.zero, n.ger=zero)
#no.ger= merge(nail.zero, key, by= "code", sort=TRUE)
###Germination at each time interval
code2=paste(field2$code,field2$pos,sep="_") #bloque_clavo_posicion
code3=paste(field2$code,field2$pos,field2$time,sep="_") #Bloque_clavo_posicion_tiempo
field3=data.frame(code2,code3,field2)
#duplicados código 3, relacionados con duplicados en la toma de datos o durante la digitalización d estadillos
field3<-field3[!duplicated(field3$code3),]
t1=subset(field3, time==1)
t2=subset(field3, time==2)
t3=subset(field3, time==3)
t4=subset(field3, time==4)
t1.conditional=t1[,1] %in% t2[,1] #TRUE == germinado/vivo; FALSE == germinado/muerto
t1=data.frame(t1, conditional=t1.conditional)
t2.conditional= t2[,1] %in% t1[,1] #TRUE == 0/0 germinado/vivo; FALSE ==no germiniado/germinado
t2=data.frame(t2, conditional=t2.conditional)
t3.1.conditional=t3[,1] %in% t1[,1]
t3.2.conditional=t3[,1] %in% t2[,1]
t3.conditional<-ifelse(t3.1.conditional=="FALSE" & t3.2.conditional=="FALSE", "FALSE","TRUE") #FALSE = Germination in T3 (no ger/no ger/germinado), TRUE== germinado en T1 o T2 y vivo T3 )
t3=data.frame(t3, conditional=t3.conditional)
t4.1.conditional=t4[,1] %in% t1[,1]
t4.2.conditional=t4[,1] %in% t2[,1]
t4.3.conditional=t4[,1] %in% t3[,1]
t4.conditional<-ifelse(t4.1.conditional=="FALSE" & t4.2.conditional=="FALSE" & t4.3.conditional=="FALSE","FALSE","TRUE") #FALSE = Germination in T4 (no ger/no ger/no ger/germinado), TRUE==Superv T4 (germinado en T1 o T2 o T3 y vivo T4)
t4=data.frame(t4, conditional=t4.conditional)
ger<-rbind(t1,subset(t2, conditional=="FALSE"),subset(t3, conditional=="FALSE"),subset(t4, conditional=="FALSE") )
#####Dataframe con todas las semillas germinadas y el censo (Time) en el que lo hicieron.
ger.sum=aggregate(class~code, data=ger, FUN=sum) #suma germinadas por clavo
colnames(ger.sum)=c("code","n.ger")
ger2= merge(key,ger.sum, by="code", sort = TRUE)
nrow(ger2) #988 clavos con germinación
length(which(!duplicated(ger$code)=="TRUE"))  #Compruebe que coincide con base de datos ger (code no duplicados es 988)
no.ger<-ger2$seeds-ger2$n.ger #calculo semillas no germinadas
p.ger=ger2$n.ger/ger2$seeds #calculo proporcion gernminadas
ger2=data.frame(ger2,no.ger,p.ger)
ger2<-droplevels(ger2)
nrow(ger2)
ger2=subset(ger2, c(blo!="B3" | blo!="B8"))
str(ger2)
ger2=subset(ger2, c(blo!="B3" | blo!="B8"))    #Eliminar bloque 3 y bloque 8
ger2<-droplevels(ger2)
str(ger2)
ger2$blo
ger2=subset(ger2, subset = c(blo!="B3" | blo!="B8"))    #Eliminar bloque 3 y bloque 8
ger2<-droplevels(ger2)
str(ger2)
ger3<-subset(ger2, subset= c(treat=="F1" | treat== "F2" | treat=="F3"))
ger3<-droplevels(ger3)
str(ger3)
ger3$blo
ger3$treat
ger3<-subset(ger2, subset= c(treat!="F4" & treat!= "F5" )) # Extraer tratamientos F4 y F5
ger3<-droplevels(ger3) #Limpiar de la memoria de R los niveles que has eliminado con subset
str(ger3)
ger3=subset(ger3, subset = c(blo!="B3" | blo!="B8"))    #Eliminar bloque 3 y bloque 8
ger3<-droplevels(ger3)
str(ger3)
ger3$blo
ger3=subset(ger3, subset = c(!(blo=="B3" | blo=="B8")))    #Eliminar bloque 3 y bloque 8
ger3<-droplevels(ger3)
str(ger3)
ger3$blo
